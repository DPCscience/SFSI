% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solveEN.R
\name{solveEN}
\alias{solveEN}
\title{Coordinate Descent algorithm to solve the Elastic-Net-type regression}
\usage{
solveEN(XtX, Xty, lambda = NULL, nLambda = 100, alpha = 1,
  scale = TRUE, tol = 1e-05, maxIter = 1000, verbose = FALSE)
}
\arguments{
\item{XtX}{Variance-covariance matrix among predictors}

\item{Xty}{Covariance vector between response variable and predictors}

\item{lambda}{Penalization parameter sequence vector. Default is \eqn{lambda=NULL}, in this case a decreasing grid of
n='nLambda' lambdas will be generated starting from a maximum equal to \eqn{max(abs(Xty)/alpha)} to a minumum equal to zero.
If \eqn{alpha=0} the grid is generated starting from a maximum equal to 5.}

\item{nLambda}{Number of lambdas generated when \eqn{lambda=NULL}}

\item{alpha}{Numeric between 0 and 1 indicating the weights for LASSO (alpha) and Ridge-Regression (1-alpha)}

\item{scale}{TRUE or FALSE to whether scaling each entry of XtX and Xty
by the SD of the corresponding predictor taken from the diagonal of XtX}

\item{tol}{Maximum error between two consecutive solutions of the iterative algorithm to declare convergence}

\item{maxIter}{Maximum number of iterations to run at each lambda step before convergence is reached}

\item{verbose}{TRUE or FALSE to whether printing each CD step}
}
\value{
List object containing the elements:
\itemize{
  \item beta: vector of regression coefficients.
  \item lambda: sequence of values of lambda used
  \item df: degrees of freedom, number of non-zero predictors at each solution.
  \item sdx: vector of standard deviation of predictors.
}
}
\description{
Computes the entire Elastic-Net solution for the regression coefficients simultaneously for all
values of the penalization parameter using as inputs a 'variance' matrix among predictors and a 'covariance'
vector between response and predictors, via the Coordinate Descent (CD) algorithm (Friedman, 2007)
}
\examples{
set.seed(1234)
require(SFSI)
# Simulate variables
n = 500; p=200;  rho=0.65
X = matrix(rnorm(n*p),ncol=p)
eta = scale(X\%*\%rnorm(p))  # signal
e =  rnorm(n)              # error
y = rho*eta + sqrt(1-rho^2)*e

# Training and testing sets
pTST = 0.3      # percentage to predict
tst = sample(1:n,floor(pTST*n))
trn = (1:n)[-tst]

# Calculate covariances in training set
P = var(X[trn,])
rhs = as.vector(cov(y[trn],X[trn,]))

# Run the penalized regression
fm = solveEN(P,rhs,verbose=TRUE)

# Regression coefficients
beta = as.matrix(fm$beta)

# Predicted values in training and testing set
yHat_TRN =  X[trn,] \%*\% t(beta)
yHat_TST =  X[tst,] \%*\% t(beta)

par(mfrow=c(1,2))
plot(fm$df,cor(y[trn],yHat_TRN)[1,],main="Training set")
plot(fm$df,cor(y[tst],yHat_TST)[1,],main="Testing set")
}
\references{
\itemize{
\item \insertRef{Friedman2007}{SFSI}
\item \insertRef{Hoerl1970}{SFSI}
\item \insertRef{Tibshirani1996}{SFSI}
\item \insertRef{Zou2005}{SFSI}
}
}
\author{
Marco Lopez-Cruz (\email{lopezcru@msu.edu}) and Gustavo de los Campos
}
\keyword{solveEN}
